#!/usr/bin/env python

# Copyright 2011 GRNET S.A. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
# 
#   1. Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer.
# 
#   2. Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY GRNET S.A. ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GRNET S.A OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and
# documentation are those of the authors and should not be
# interpreted as representing official policies, either expressed
# or implied, of GRNET S.A.

from sqlalchemy import Table
from sqlalchemy.sql import select

from binascii import hexlify

from pithos.backends.lib.hashfiler import Blocker
from pithos.backends.lib.sqlalchemy import Node
from pithos.aai.models import PithosUser

from django.conf import settings

from pithos.backends.modular import CLUSTER_NORMAL, CLUSTER_HISTORY, CLUSTER_DELETED
from pithos.backends.lib.sqlalchemy.node import Node
from pithos.backends.lib.sqlalchemy.dbwrapper import DBWrapper

from lib.transfer import upload
from lib.hashmap import HashMap, file_read_iterator
from lib.client import Fault
from lib.migrate import Migration

import json
import os
import sys
import hashlib
import mimetypes

class ObjectMigration(Migration):
    def __init__(self, old_db):
        Migration.__init__(self, old_db)
        self.wrapper = ClientWrapper(self.backend)
        params = {'wrapper': DBWrapper(self.backend.db)}
        self.node = Node(**params)
        
    def create_default_containers(self):
        users = PithosUser.objects.all()
        for u in users:
            print '#', u.uniq
            try:
                self.wrapper.create_container('pithos', u.uniq)
                self.wrapper.create_container('trash', u.uniq)
            except NameError, e:
                pass
    
    def get_path(self, child_id):
        folderTable = Table('folder', self.metadata, autoload=True)
        s = select([folderTable.c.parent_id, folderTable.c.name])
        s = s.where(folderTable.c.id == child_id)
        rp = self.conn.execute(s)
        parent_id, foldername = rp.fetchone()
        if not parent_id:
            return ''
        else:
            return '%s/%s' %(self.get_path(parent_id), foldername)
    
    def create_object(self, username, container, object, filepath, mimetype):
        obj = ''
        path = '/'.join(object.split('/')[:-1])
        name =  object.split('/')[-1]
        #create directory markers
        for f in path.split('/'):
            obj = '%s/%s' %(obj, f) if obj else f
            try:
                self.wrapper.create_directory_marker('pithos', obj, username)
            except NameError, e:
                pass
        self.wrapper.set_account(username)
                
        prefix = '%s/' %path if path else ''
        print '#', filepath, container, prefix, name, mimetype
        return upload(self.wrapper, filepath, container, prefix, name, mimetype)
    
    def create_history(self, user, header_id, node_id, deleted=False):
        filebody = Table('filebody', self.metadata, autoload=True)
        gss_user = Table('gss_user', self.metadata, autoload=True)
        j = filebody.join(gss_user, filebody.c.modifiedby_id == gss_user.c.id)
        s = select([filebody.c.filesize, gss_user.c.username], from_obj=j)
        s = s.where(filebody.c.header_id == header_id)
        s = s.order_by(filebody.c.version)
        rp = self.conn.execute(s)
        versions = rp.fetchall()
        print '#', len(versions)
        rp.close()
        i = 0
        for size, modyfied_by  in versions:
            cluster = CLUSTER_HISTORY if i < len(versions) - 1 else CLUSTER_NORMAL
            cluster = cluster if not deleted else CLUSTER_DELETED
            args = (node_id, size, None, modyfied_by, cluster)
            self.node.version_create(*args)
            i += 1
    
    def create_objects(self):
        fileheader = Table('fileheader', self.metadata, autoload=True)
        filebody = Table('filebody', self.metadata, autoload=True)
        folder = Table('folder', self.metadata, autoload=True)
        gss_user = Table('gss_user', self.metadata, autoload=True)
        j = filebody.join(fileheader, filebody.c.id == fileheader.c.currentbody_id)
        j = j.join(folder, fileheader.c.folder_id == folder.c.id)
        j = j.join(gss_user, fileheader.c.owner_id == gss_user.c.id)
        s = select([gss_user.c.username,  fileheader.c.id, fileheader.c.folder_id,
                    fileheader.c.name,  fileheader.c.deleted, filebody.c.storedfilepath,
                    filebody.c.mimetype], from_obj=j)
        rp = self.conn.execute(s)
        objects = rp.fetchall()
        for username, headerid, folderid, filename, deleted, filepath, mimetype in objects:
            path = self.get_path(folderid)[1:]
            container = 'pithos' if not deleted else 'trash'
            object = '%s/%s' %(path, filename)
            #filepath = '/Users/butters/Downloads/torvalds-linux-0f86267'
            vserial = self.create_object(username, container, object, filepath, mimetype)
            nodeid = self.node.version_get_properties(vserial, keys=('node',))[0]
            self.create_history(username, headerid, nodeid, deleted)
            self.node.version_remove(vserial)
            #self.set_metadata()
            #self.set_public()
            #self.statistics()
            #self.set_permissions()
    
    def handle_deleted(self):
        pass
    
    def upload_dir(self, dir, prefix, user, container):
        for f in os.listdir(dir):
            fullpath = '%s/%s' %(dir, f)
            if os.path.isfile(fullpath):
                type = mimetypes.guess_type(fullpath)[0]
                name = '/'.join(fullpath.split(prefix)[1:])
                print '@', user, container, name, fullpath, type
                self.create_object(user, container, name, fullpath, type)
            else: self.upload_dir(fullpath, prefix, user, container)

class ClientWrapper(object):
    """Wraps client methods used by transfer.upload()
    to ModularBackend methods"""
    
    def __init__(self, backend):
        self.backend = backend
        self.block_size = self.backend.block_size
        self.block_hash = self.backend.hash_algorithm
    
    def set_account(self, account):
        self.account = account
    
    def create_container(self, container, account=None, **meta):
        self.backend.put_container(account, account, container, meta)
    
    def create_directory_marker(self, container, object, account=None):
        md5 = hashlib.md5()
        meta = {'Content-Type':'application/directory',
                'hash':  md5.hexdigest().lower()}
        self.backend.update_object_hashmap(account, account, container, object, 0, [], meta)   
    
    def create_object_by_hashmap(self, container, object, map, mimetype=None):
        hashmap = HashMap(self.block_size, self.block_hash)
        for h in map['hashes']:
            hashmap.append(h)
        meta = {'hash':hexlify(hashmap.hash())}
        if mimetype:
            meta['content-type'] = mimetype
        size = map['bytes']
        try:
            args = [self.account, self.account, container, object, size,  map['hashes'], meta]
            return self.backend.update_object_hashmap(*args)
        except IndexError, ie:
            fault = Fault(ie.data, 409)
            raise fault
    
    def update_container_data(self, container, f):
        #just put the blocks
        for block in file_read_iterator(f, self.block_size):
            self.backend.put_block(block)
    
    def retrieve_container_metadata(self, container):
        return {'x-container-block-size':self.block_size,
                'x-container-block-hash':self.block_hash}

if __name__ == "__main__":
    old_db = ''
    
    ot = ObjectMigration(old_db)
    #ot.create_default_containers()
    #ot.create_objects()
    
    p = ''
    ot.upload_dir(p, p, 'chstath', 'linux')
    
    