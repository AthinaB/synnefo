#!/usr/bin/env python

# Copyright (C) 2010-2014 GRNET S.A.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from sqlalchemy import Table
from sqlalchemy.sql import select

from pithos.im.models import User

from migrate import Migration

import base64

class UserMigration(Migration):
    def __init__(self, db):
        Migration.__init__(self, db)
        self.gss_users = Table('gss_user', self.metadata, autoload=True)
    
    def execute(self):
        for u in self.retrieve_users():
            user = User()
            user.pk = u['id']
            user.uniq = u['username']
            user.realname = u['name']
            user.affiliation = u['homeorganization'] if u['homeorganization'] else ''
            user.auth_token = base64.b64encode(u['authtoken'])
            user.auth_token_created = u['creationdate']
            user.auth_token_expires = u['authtokenexpirydate']
            user.created = u['creationdate']
            user.updated = u['modificationdate']
            user.email = u['email']
            user.active = 'ACTIVE' if u['active'] else 'SUSPENDED'
            print '#', user
            user.save(update_timestamps=False)
            
            #create user groups
            for (owner, group, members) in self.retrieve_groups(u['username']):
                self.backend.permissions.group_addmany(owner, group, members)
    
    
    def retrieve_users(self):
        s = self.gss_users.select()
        rp = self.conn.execute(s)
        user = rp.fetchone()
        while user:
            yield user
            user = rp.fetchone()
        rp.close()
    
    def retrieve_groups(self, owner):
        gss_group = Table('gss_group', self.metadata, autoload=True)
        gss_user = Table('gss_user', self.metadata, autoload=True)
        group_user = Table('gss_group_gss_user', self.metadata, autoload=True)
        j1 = gss_group.join(gss_user, gss_group.c.owner_id == gss_user.c.id)
        j2 = group_user.join(gss_user, group_user.c.members_id == gss_user.c.id)
        s = select([gss_group.c.id, gss_group.c.name, gss_user.c.username], from_obj=j1)
        s = s.where(gss_user.c.username == owner)
        rp = self.conn.execute(s)
        gr = rp.fetchone()
        while gr:
            id, group, owner = gr
            s = select([gss_user.c.username], from_obj=j2)
            s = s.where(group_user.c.groupsmember_id == id)
            rp2 = self.conn.execute(s)
            members = rp2.fetchall()
            rp2.close()
            yield owner, group, (m[0] for m in members)
            gr = rp.fetchone()
        rp.close()

if __name__ == "__main__":
    db = ''
    m = UserMigration(db)
    m.execute()
